// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePlay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GamePlay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBFrameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBFrameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFrameSyncRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFrameSyncRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSFrameSyncResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSFrameSyncResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBackRoomListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBackRoomListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSBackRoomListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSBackRoomListResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GamePlay_2eproto() {
  protobuf_AddDesc_GamePlay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GamePlay.proto");
  GOOGLE_CHECK(file != NULL);
  PBFrameMessage_descriptor_ = file->message_type(0);
  static const int PBFrameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFrameMessage, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFrameMessage, operation_),
  };
  PBFrameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBFrameMessage_descriptor_,
      PBFrameMessage::default_instance_,
      PBFrameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFrameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBFrameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBFrameMessage));
  CSFrameSyncRequest_descriptor_ = file->message_type(1);
  static const int CSFrameSyncRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFrameSyncRequest, step_),
  };
  CSFrameSyncRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFrameSyncRequest_descriptor_,
      CSFrameSyncRequest::default_instance_,
      CSFrameSyncRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFrameSyncRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFrameSyncRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFrameSyncRequest));
  CSFrameSyncResponse_descriptor_ = file->message_type(2);
  static const int CSFrameSyncResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFrameSyncResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFrameSyncResponse, steps_),
  };
  CSFrameSyncResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSFrameSyncResponse_descriptor_,
      CSFrameSyncResponse::default_instance_,
      CSFrameSyncResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFrameSyncResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSFrameSyncResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSFrameSyncResponse));
  CSBackRoomListRequest_descriptor_ = file->message_type(3);
  static const int CSBackRoomListRequest_offsets_[1] = {
  };
  CSBackRoomListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBackRoomListRequest_descriptor_,
      CSBackRoomListRequest::default_instance_,
      CSBackRoomListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBackRoomListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBackRoomListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBackRoomListRequest));
  CSBackRoomListResponse_descriptor_ = file->message_type(4);
  static const int CSBackRoomListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBackRoomListResponse, result_),
  };
  CSBackRoomListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSBackRoomListResponse_descriptor_,
      CSBackRoomListResponse::default_instance_,
      CSBackRoomListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBackRoomListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSBackRoomListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSBackRoomListResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GamePlay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBFrameMessage_descriptor_, &PBFrameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFrameSyncRequest_descriptor_, &CSFrameSyncRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSFrameSyncResponse_descriptor_, &CSFrameSyncResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBackRoomListRequest_descriptor_, &CSBackRoomListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSBackRoomListResponse_descriptor_, &CSBackRoomListResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GamePlay_2eproto() {
  delete PBFrameMessage::default_instance_;
  delete PBFrameMessage_reflection_;
  delete CSFrameSyncRequest::default_instance_;
  delete CSFrameSyncRequest_reflection_;
  delete CSFrameSyncResponse::default_instance_;
  delete CSFrameSyncResponse_reflection_;
  delete CSBackRoomListRequest::default_instance_;
  delete CSBackRoomListRequest_reflection_;
  delete CSBackRoomListResponse::default_instance_;
  delete CSBackRoomListResponse_reflection_;
}

void protobuf_AddDesc_GamePlay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GamePlay.proto\"0\n\016PBFrameMessage\022\013\n\003ui"
    "n\030\001 \001(\005\022\021\n\toperation\030\002 \001(\t\"3\n\022CSFrameSyn"
    "cRequest\022\035\n\004step\030\001 \001(\0132\017.PBFrameMessage\""
    "E\n\023CSFrameSyncResponse\022\016\n\006result\030\001 \001(\005\022\036"
    "\n\005steps\030\002 \003(\0132\017.PBFrameMessage\"\027\n\025CSBack"
    "RoomListRequest\"(\n\026CSBackRoomListRespons"
    "e\022\016\n\006result\030\001 \001(\005", 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GamePlay.proto", &protobuf_RegisterTypes);
  PBFrameMessage::default_instance_ = new PBFrameMessage();
  CSFrameSyncRequest::default_instance_ = new CSFrameSyncRequest();
  CSFrameSyncResponse::default_instance_ = new CSFrameSyncResponse();
  CSBackRoomListRequest::default_instance_ = new CSBackRoomListRequest();
  CSBackRoomListResponse::default_instance_ = new CSBackRoomListResponse();
  PBFrameMessage::default_instance_->InitAsDefaultInstance();
  CSFrameSyncRequest::default_instance_->InitAsDefaultInstance();
  CSFrameSyncResponse::default_instance_->InitAsDefaultInstance();
  CSBackRoomListRequest::default_instance_->InitAsDefaultInstance();
  CSBackRoomListResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GamePlay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GamePlay_2eproto {
  StaticDescriptorInitializer_GamePlay_2eproto() {
    protobuf_AddDesc_GamePlay_2eproto();
  }
} static_descriptor_initializer_GamePlay_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBFrameMessage::kUinFieldNumber;
const int PBFrameMessage::kOperationFieldNumber;
#endif  // !_MSC_VER

PBFrameMessage::PBFrameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBFrameMessage::InitAsDefaultInstance() {
}

PBFrameMessage::PBFrameMessage(const PBFrameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBFrameMessage::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  operation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBFrameMessage::~PBFrameMessage() {
  SharedDtor();
}

void PBFrameMessage::SharedDtor() {
  if (operation_ != &::google::protobuf::internal::kEmptyString) {
    delete operation_;
  }
  if (this != default_instance_) {
  }
}

void PBFrameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBFrameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBFrameMessage_descriptor_;
}

const PBFrameMessage& PBFrameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePlay_2eproto();
  return *default_instance_;
}

PBFrameMessage* PBFrameMessage::default_instance_ = NULL;

PBFrameMessage* PBFrameMessage::New() const {
  return new PBFrameMessage;
}

void PBFrameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    if (has_operation()) {
      if (operation_ != &::google::protobuf::internal::kEmptyString) {
        operation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBFrameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operation;
        break;
      }

      // optional string operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBFrameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional string operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBFrameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional string operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBFrameMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional string operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBFrameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBFrameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBFrameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBFrameMessage::MergeFrom(const PBFrameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBFrameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBFrameMessage::CopyFrom(const PBFrameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBFrameMessage::IsInitialized() const {

  return true;
}

void PBFrameMessage::Swap(PBFrameMessage* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBFrameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBFrameMessage_descriptor_;
  metadata.reflection = PBFrameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFrameSyncRequest::kStepFieldNumber;
#endif  // !_MSC_VER

CSFrameSyncRequest::CSFrameSyncRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFrameSyncRequest::InitAsDefaultInstance() {
  step_ = const_cast< ::PBFrameMessage*>(&::PBFrameMessage::default_instance());
}

CSFrameSyncRequest::CSFrameSyncRequest(const CSFrameSyncRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFrameSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  step_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFrameSyncRequest::~CSFrameSyncRequest() {
  SharedDtor();
}

void CSFrameSyncRequest::SharedDtor() {
  if (this != default_instance_) {
    delete step_;
  }
}

void CSFrameSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFrameSyncRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFrameSyncRequest_descriptor_;
}

const CSFrameSyncRequest& CSFrameSyncRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePlay_2eproto();
  return *default_instance_;
}

CSFrameSyncRequest* CSFrameSyncRequest::default_instance_ = NULL;

CSFrameSyncRequest* CSFrameSyncRequest::New() const {
  return new CSFrameSyncRequest;
}

void CSFrameSyncRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_step()) {
      if (step_ != NULL) step_->::PBFrameMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFrameSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PBFrameMessage step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFrameSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PBFrameMessage step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFrameSyncRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PBFrameMessage step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFrameSyncRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PBFrameMessage step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFrameSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFrameSyncRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFrameSyncRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFrameSyncRequest::MergeFrom(const CSFrameSyncRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      mutable_step()->::PBFrameMessage::MergeFrom(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFrameSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFrameSyncRequest::CopyFrom(const CSFrameSyncRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFrameSyncRequest::IsInitialized() const {

  return true;
}

void CSFrameSyncRequest::Swap(CSFrameSyncRequest* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFrameSyncRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFrameSyncRequest_descriptor_;
  metadata.reflection = CSFrameSyncRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSFrameSyncResponse::kResultFieldNumber;
const int CSFrameSyncResponse::kStepsFieldNumber;
#endif  // !_MSC_VER

CSFrameSyncResponse::CSFrameSyncResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSFrameSyncResponse::InitAsDefaultInstance() {
}

CSFrameSyncResponse::CSFrameSyncResponse(const CSFrameSyncResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSFrameSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFrameSyncResponse::~CSFrameSyncResponse() {
  SharedDtor();
}

void CSFrameSyncResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSFrameSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSFrameSyncResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSFrameSyncResponse_descriptor_;
}

const CSFrameSyncResponse& CSFrameSyncResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePlay_2eproto();
  return *default_instance_;
}

CSFrameSyncResponse* CSFrameSyncResponse::default_instance_ = NULL;

CSFrameSyncResponse* CSFrameSyncResponse::New() const {
  return new CSFrameSyncResponse;
}

void CSFrameSyncResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  steps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSFrameSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_steps;
        break;
      }

      // repeated .PBFrameMessage steps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_steps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_steps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFrameSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .PBFrameMessage steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->steps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSFrameSyncResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .PBFrameMessage steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->steps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSFrameSyncResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .PBFrameMessage steps = 2;
  total_size += 1 * this->steps_size();
  for (int i = 0; i < this->steps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFrameSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSFrameSyncResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSFrameSyncResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSFrameSyncResponse::MergeFrom(const CSFrameSyncResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  steps_.MergeFrom(from.steps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSFrameSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSFrameSyncResponse::CopyFrom(const CSFrameSyncResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFrameSyncResponse::IsInitialized() const {

  return true;
}

void CSFrameSyncResponse::Swap(CSFrameSyncResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    steps_.Swap(&other->steps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSFrameSyncResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSFrameSyncResponse_descriptor_;
  metadata.reflection = CSFrameSyncResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSBackRoomListRequest::CSBackRoomListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBackRoomListRequest::InitAsDefaultInstance() {
}

CSBackRoomListRequest::CSBackRoomListRequest(const CSBackRoomListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBackRoomListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBackRoomListRequest::~CSBackRoomListRequest() {
  SharedDtor();
}

void CSBackRoomListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBackRoomListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBackRoomListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBackRoomListRequest_descriptor_;
}

const CSBackRoomListRequest& CSBackRoomListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePlay_2eproto();
  return *default_instance_;
}

CSBackRoomListRequest* CSBackRoomListRequest::default_instance_ = NULL;

CSBackRoomListRequest* CSBackRoomListRequest::New() const {
  return new CSBackRoomListRequest;
}

void CSBackRoomListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBackRoomListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSBackRoomListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBackRoomListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBackRoomListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBackRoomListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBackRoomListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBackRoomListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBackRoomListRequest::MergeFrom(const CSBackRoomListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBackRoomListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBackRoomListRequest::CopyFrom(const CSBackRoomListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBackRoomListRequest::IsInitialized() const {

  return true;
}

void CSBackRoomListRequest::Swap(CSBackRoomListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBackRoomListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBackRoomListRequest_descriptor_;
  metadata.reflection = CSBackRoomListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSBackRoomListResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CSBackRoomListResponse::CSBackRoomListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSBackRoomListResponse::InitAsDefaultInstance() {
}

CSBackRoomListResponse::CSBackRoomListResponse(const CSBackRoomListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSBackRoomListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBackRoomListResponse::~CSBackRoomListResponse() {
  SharedDtor();
}

void CSBackRoomListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSBackRoomListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSBackRoomListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSBackRoomListResponse_descriptor_;
}

const CSBackRoomListResponse& CSBackRoomListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GamePlay_2eproto();
  return *default_instance_;
}

CSBackRoomListResponse* CSBackRoomListResponse::default_instance_ = NULL;

CSBackRoomListResponse* CSBackRoomListResponse::New() const {
  return new CSBackRoomListResponse;
}

void CSBackRoomListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSBackRoomListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBackRoomListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSBackRoomListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSBackRoomListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBackRoomListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSBackRoomListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSBackRoomListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSBackRoomListResponse::MergeFrom(const CSBackRoomListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSBackRoomListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSBackRoomListResponse::CopyFrom(const CSBackRoomListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBackRoomListResponse::IsInitialized() const {

  return true;
}

void CSBackRoomListResponse::Swap(CSBackRoomListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSBackRoomListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSBackRoomListResponse_descriptor_;
  metadata.reflection = CSBackRoomListResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
